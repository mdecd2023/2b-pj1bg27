<h1>Aboutt</h1>
<p>resume 作業示範:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecd2023/resume-scrum-1">https://github.com/mdecd2023/resume-scrum-1</a></p>
<p>2a pj1agx 作業示範:</p>
<p style="padding-left: 30px;">將 <a href="https://github.com/mdecycu/cmsimde">https://github.com/mdecycu/cmsimde</a> 作為倉儲的 cmsimde 目錄, 並從 up_dir 取出所有檔案放入 2a-pj1agx 倉儲的根目錄, 則可以 cms 啟動 dynamic site, 並將 token 放入 .git/config 中的 URL, 就可直接在動態網頁中進行改版, 以 generate_pages 轉為靜態後, 直接以 acp 進行 git add, commit 與 push</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecd2023/2a-pj1agx">https://github.com/mdecd2023/2a-pj1agx</a></p>
<p style="padding-left: 30px;">靜態網頁:</p>
<p style="padding-left: 30px;"><a href="https://mdecd2023.github.io/2a-pj1agx">https://mdecd2023.github.io/2a-pj1agx</a></p><h2>Github</h2>
<h4>甚麼情況下要 fork 其他人的 github 倉儲?</h4>
<ol>
<li>想要保留該 github 倉儲目前所有分支的內容 (因為若倉儲擁有者將該倉儲轉為 private 後, 其他無權限的用戶就無法擷取該倉儲內容)</li>
<li>希望在自己的帳號權限下修改倉儲內容後, 以 pull requests 流程請求倉儲擁有者 review 後將此一改版的功能或修正合併至原始倉儲 (因為並沒有權限直接對該倉儲改版)</li>
</ol>
<h4>想要多了解 git:</h4>
<p style="padding-left: 30px;"><a href="https://git-scm.com/book/zh-tw/v2">https://git-scm.com/book/zh-tw/v2</a></p>
<p style="padding-left: 30px;">版本控制是一種記錄一個或若干文件內容變化，以便將來查閱特定版本修訂情況的系統。</p>
<p style="padding-left: 30px;">它允許你將檔案復原到之前的狀態、將整個專案復原到先前的狀態、比對某一段時間的修改、查看最後是誰在哪個時間點做了錯誤的修改導致問題發生，誰在何時提出了某個功能缺陷⋯⋯等。</p>
<p style="padding-left: 30px;">分散式版本控制系統（Distributed Version Control Systems，簡稱 DVCSs），（如 Git、Mercurial、Bazaar 和 Darcs）中，用戶端並不只取出最新的檔案快照；還把整個倉儲做個鏡像。 假設有任何一個協同合作的伺服器故障，事後都可以用任何一個用戶端的鏡像來還原。 因為每個地方都有完整的資料備份。<br/><br/>Linux kernel 是規模相當大的開放原始碼軟體專案。 Linux kernel 在 1991 年到 2002 年間的維護工作，幾乎都是透過補丁和壓縮檔來完成的。 在 2002 年時，Linux kernel 開始採用名為 BitKeeper 的商業分散式版本控制系統。<br/><br/>在 2005 年時，開發 Linux kernel 的社群與開發 BitKeeper 的商業公司的合作關係結束，也就無法再免費使用該工具。 這就迫使了 Linux 社群（特別是 Linux 之父 Linus Torvalds）基於使用 BitKeeper 所學到的經驗，來開發自有的工具。 這個系統必須達成下列目標：<br/><br/>    快速<br/><br/>    簡潔的設計<br/><br/>    完整支援非線性的開發（上千個同時進行的分支）<br/><br/>    完全的分散式系統<br/><br/>    能夠有效地處理像 Linux kernel 規模的專案（速度及資料大小）<br/><br/>從 Git 在 2005 年誕生後，現在的 Git 已相當成熟，也能很容易上手，並保持著最一開始的要求的品質。 它不可思議的快速、處理大型專案非常有效率、也具備相當優秀足以應付非線性開發的分支系統。</p><h1>Resume</h1>
<p>LaTex or Word?<br/>MikTeX or TeXLive?<br/>How to use ChatGPT?</p>
<p>納入 Portable MiKTeX 之後的可攜 Python 程式套件: <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/Ecr0uG0UzJlBtwpYzztBupUBkUdQsQgmd9PWzfjTZBsB8w?e=zlb42j">wcm_portable_w2-4-miktex.7z</a></p><h1>pj1</h1>
<p>localhost, replit, stud?, stud2<br/>ssh or token?<br/>cmsimde based or not?<br/>can not upload .txt file into cmsimde based web site!!</p>
<p>確定 server.py 與 acp 可以正確運作</p>
<p>開始執行 <a href="https://mde.tw/pjcopsim/content/bubbleRobTutorial.html">https://mde.tw/pjcopsim/content/bubbleRobTutorial.html</a> </p>
<h2>2apj1</h2>
<p><a href="https://github.com/mdecd2023">https://github.com/mdecd2023</a></p>
<p>已經完成網頁建置的分組:</p>
<p>w3 - 2023.03.10.16 已經完成分組網頁者, 可以得到分組網頁評分</p>
<p>w3 - 請各組寫一個程式判定 2a 哪一組已經完成網頁建置.</p>
<p>w3 開始執行 <a href="https://mde.tw/pjcopsim/content/bubbleRobTutorial.html">https://mde.tw/pjcopsim/content/bubbleRobTutorial.html</a></p>
<p>星期四補課時間, 要驗收 Tutorial1 (心得, 展示頁面說明各組員所完成項目, 說明該組的專案規劃)</p>
<p>為了以較有效率的方式驗收各分組專案與網頁內容, 需要將 2a.txt (修課學員學號與 Github 帳號對應檔案) 放入</p>
<p><a href="https://github.com/mdecycu/studlist/tree/main/2023spring,">https://github.com/mdecycu/studlist/tree/main/2023spring,</a> 請問該用何種方式取得與維護此份資料.</p>
<p style="padding-left: 30px;">以 Office 365 中的公開 Excel 表單讓使用者填入後, 轉檔至 2023spring/2a.txt, 之後再透過倉儲 pull requests 進行維護.</p>
<p style="padding-left: 60px;">若有更動, 請從 <a href="https://github.com/mdecycu/studlist">https://github.com/mdecycu/studlist</a> 以 Pull Requests 進行修改)</p>
<p style="padding-left: 30px;">請問有沒有其他更有效率的方法與流程?</p>
<p style="padding-left: 60px;">寫一個網際程式, 以學號@nfu.edu.tw 登入 (mail2000 是否支援 oauth2?) 後填入個人的 github 帳號</p>
<p style="padding-left: 60px;">在 office 365 建立表單, 學員以學號@nfu.edu.tw 登入後, 填入 github 帳號</p>
<p>2a 總共會有 21 組:</p>
<p></p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
</script>
<p id="brython_div1"></p>
<script type="text/python3">
# 從 Brython 的 browser 模組導入 document 與 html 程式庫
from browser import document, html

# 利用 document 物件, 以索引 "brython_div1" 取得已經位於 html 網頁中 id="brython_div1" 的位置, 且對應到 brython_div1 變數
brython_div1 = document["brython_div1"]
# 可以用三個單引號或三個雙引號標註多行註解
# 其中的 html 物件有許多建立 html 超文件內容的方法, 以下分別建立
# BUTTON 按鈕, BR 跳行 (break), 以及 A 網站連結 (Anchor)
# <= 是 Brython 程式語言的特殊符號, 專用於將 html 超文件資料送給網頁對應變數
"""
brython_div1 <= html.BUTTON("hello")
brython_div1 <= html.BR()
brython_div1 <= html.A("google", href="https://google.com")
"""
try:
    c = document.query["c"]
except:
    c = "2a"
# 將 1b.txt 資料從 Github Pages 網頁中取下
url = "https://mde.tw/studlist/2023spring/" + c + ".txt"
# 利用 open() 開啟網頁, 利用 read() 讀取網頁內容
# 然後利用 split() 方法, 利用跳行符號對資料進行切割, 切割後的資料結構為 list
# list 資料結構以 [] 區隔, 表示資料為數列, 其起始的索引值為 0
data = open(url).read().split("\n")
# 將每一位學員的靜態網頁共同的網路連結部分設為字串, 且與 mdecd2023 變數對應
mdecd2023_2a= "https://mdecd2023.github.io/2a-pj1ag"
repo = "https://github.com/mdecd2023/2a-pj1ag"
grp_title = "2a-pj1ag"
total_grp_num = 21
for i in range(1, total_grp_num+1):
    grp_site_url = mdecd2023_2a + str(i)
    repo_url = repo + str(i)
    link = html.A(grp_title+str(i), href=grp_site_url)
    repo_link = html.A("repo", href=repo_url)
    brython_div1 <= link
    brython_div1 <= "(" + repo_link + ")"
    brython_div1 <= html.BR()
"""
# 因為取下的資料第一筆為標題, 而最後一筆為空字串, 可以利用 Brython 的數列索引取值範圍將索引 0 與最後一個數列值去除
data = data[1:-1]
# 利用 for 重複迴圈逐一取出 data 數列中的值, 然後以 \t, 也就是 tab 符號切割
count = 0
for i in data:
    count += 1
    stud = i.split("\t")
    # 第一欄位為學號
    stud_num = stud[0]
    # 第二欄未為 github 帳號
    try:
         github_acc = stud[1]
    except:
        github_acc = stud_num
    # 將靜態網頁共同連結的變數與各自的 github 帳號, 組成完整的各學員靜態網頁連結
    site = mdecp2022 + github_acc
    # 利用 A 物件產生連結, 然後放入 id="brython_div1 所在的網頁位置
    link = html.A(stud_num, href=site)
    brython_div1 <= link
    # 每一筆資料列出後, 以 break 標註跳行
    # 每一行列出五筆資料後, 跳行
    brython_div1 <= " "
    if count % 5 == 0:
        brython_div1 <= html.BR()
"""
</script><h3>2aw3</h3>
<p>2a-pj1g 分組沒有網站:</p>
<p>ag21</p>
<p>ag20</p>
<p>ag19</p>
<p>ag18</p>
<p>ag16</p>
<p>ag15</p>
<p>ag14</p>
<p>ag12</p>
<p>ag9</p>
<p>ag8</p>
<p>ag7</p>
<p>ag4</p>
<p>ag3</p>
<p></p>
<p></p><h2>2bpj1</h2>
<p>bg6 -&gt; 刪除 cmsimde, 重建 cmsimde 目錄</p>
<p>bg22 -&gt; 刪除 cmsimde, 重建 cmsimde 目錄</p>
<p>2b 總共會有 31 組:</p>
<p></p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
</script>
<p id="brython_div1"></p>
<script type="text/python3">
from browser import document, html

def check_content(url, key_word):
    data = open(url + "/").read()
    if key_word in data:
        return True
    else:
        return False

brython_div1 = document["brython_div1"]
c = "2b"
url = "https://mde.tw/studlist/2023spring/" + c + ".txt"
data = open(url).read().split("\n")
mdecd2023_2b= "https://mdecd2023.github.io/2b-pj1bg"
repo = "https://github.com/mdecd2023/2b-pj1bg"
grp_title = "2b-pj1bg"
total_grp_num = 31
for i in range(1, total_grp_num+1):
    grp_site_url = mdecd2023_2b + str(i)
    repo_url = repo + str(i)
    link = html.A(grp_title+str(i), href=grp_site_url)
    repo_link = html.A("repo", href=repo_url)
    brython_div1 <= link
    brython_div1 <= "(" + repo_link + ")"
    if check_content(grp_site_url, "vacant") == True:
        brython_div1 <= " no web site yet"
    brython_div1 <= html.BR()
</script><h3>2bw3</h3>
<p>2b-pj1bg1(repo)<br/>2b-pj1bg2(repo)<br/>2b-pj1bg3(repo) no web site yet<br/>2b-pj1bg4(repo)<br/>2b-pj1bg5(repo)<br/>2b-pj1bg6(repo)<br/>2b-pj1bg7(repo)<br/>2b-pj1bg8(repo) no web site yet<br/>2b-pj1bg9(repo) no web site yet<br/>2b-pj1bg10(repo)<br/>2b-pj1bg11(repo)<br/>2b-pj1bg12(repo)<br/>2b-pj1bg13(repo)<br/>2b-pj1bg14(repo) no web site yet<br/>2b-pj1bg15(repo)<br/>2b-pj1bg16(repo)<br/>2b-pj1bg17(repo)<br/>2b-pj1bg18(repo)<br/>2b-pj1bg19(repo)<br/>2b-pj1bg20(repo)<br/>2b-pj1bg21(repo)<br/>2b-pj1bg22(repo)<br/>2b-pj1bg23(repo)<br/>2b-pj1bg24(repo)<br/>2b-pj1bg25(repo)<br/>2b-pj1bg26(repo)<br/>2b-pj1bg27(repo) no web site yet<br/>2b-pj1bg28(repo) no web site yet<br/>2b-pj1bg29(repo) no web site yet<br/>2b-pj1bg30(repo) no web site yet<br/>2b-pj1bg31(repo) no web site yet</p><h1>協同設計</h1>
<h4>協同設計要點:</h4>
<ol>
<li>參與協同者能否<span style="background-color: #ffff00;">同步並發</span>執行所被交付的內容</li>
<li>能否保留每一個階段所從事的設計版本</li>
<li>能否確認哪一階段的哪一事項是由哪位成員所完成 (可居功而且無法諉過)</li>
<li>了解採用不同設計流程的原因, 目的與所可能遭遇的問題, 讓協同者可在逐步改版過程逼近預設目標</li>
</ol><h1>allowExt</h1>
<p>假如使用 cmsimde 作為網際內容管理系統, 但是想要上傳 .txt 檔案, 則可以直接將 cmsimde 作為子目錄後, 修改 cmsimde 目錄中的 flaskapp.py 中的 allowExt 設定, 將 'swf' 改為 'txt' 然後重新啟動網站, 就可以上傳 .txt 檔案.</p>
<p><a href="/downloads/cd2023b_w2_note.txt">cd2023b_w2_note.txt</a></p>
<h1>Tools</h1>
<p>Portable grepwin: <a href="https://github.com/stefankueng/grepWin/releases/tag/2.0.13">https://github.com/stefankueng/grepWin/releases/tag/2.0.13</a></p>
<p>管理團隊: <a href="https://github.com/orgs/mdecd2023/teams">https://github.com/orgs/mdecd2023/teams</a></p>
<p></p>